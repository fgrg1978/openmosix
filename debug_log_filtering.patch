Subject: [patch @num@/@total@] @name@

Fixed OMDEBUG macro, as suggested by Carl Radford
filtered a bit more messages, and moved most useless messages to level 4

---
 hpc/kcom.c          |   48 ++++++++++++++++++++++++++----------------------
 hpc/kcomd.c         |   12 ++++++------
 include/hpc/debug.h |    7 +++++--
 3 files changed, 37 insertions(+), 30 deletions(-)


Index: linux/hpc/kcom.c
===================================================================
--- linux.orig/hpc/kcom.c	2007-01-04 14:17:49.000000000 +0100
+++ linux/hpc/kcom.c	2007-01-04 15:13:15.000000000 +0100
@@ -146,23 +146,12 @@
 
 void om_dump_packet_hdr(const struct kcom_pkt* const pkt)
 {
-	char buffer[64];
 
 	if (!pkt) {
 		OMBUG("packet is null, can't dump header\n");
 		return;
 	}
 
-	om_format_flags(pkt->flags, buffer);
-
-	printk(KERN_DEBUG"[oM] pktdump magic:0x%x hdr_len:%d\n", pkt->magic, pkt->hdr_len);
-	printk(KERN_DEBUG"[oM] pktdump type=%d: %s\n", pkt->type, __get_packet_name(pkt->type));
-	printk(KERN_DEBUG"[oM] pktdump flgs=0x%x: %s\n", pkt->flags, buffer);
-	printk(KERN_DEBUG"[oM] pktdump hpid: %5d rpid: %5d msgid: %d len: %d\n"
-			, pkt->hpid, pkt->rpid, pkt->msgid, pkt->data_len);
-
-	printk(KERN_DEBUG"[oM] pktdump addr: 0x%p msgid: %d\n"
-			, (void *) pkt->addr, pkt->msgid);
 
 	printk(KERN_DEBUG"[oM] pktdump RAW header dump -------------------------------------\n");
 	hexdump((char*)pkt, KCOM_PKT_NET_SIZE);
@@ -198,14 +187,31 @@
 void om_dump_packet(const struct kcom_pkt* const pkt)
 {
 
+	char buffer[64];
 	if (!pkt) {
 		OMBUG("packet is NULL ... can't dump it \n");
 		return;
 	}
 
-	om_dump_packet_hdr(pkt);
+	om_format_flags(pkt->flags, buffer);
+
+	printk(KERN_DEBUG"[oM] ==========================pktdump header dump=============================\n");
+	printk(KERN_DEBUG"[oM] pktdump type=%d: %s\n", pkt->type, __get_packet_name(pkt->type));
+	printk(KERN_DEBUG"[oM] pktdump flgs=0x%x: %s\n", pkt->flags, buffer);
+	printk(KERN_DEBUG"[oM] pktdump pid(%5d,%5d) msgid: %d len: %d addr: %p\n"
+			, pkt->hpid, pkt->rpid, pkt->msgid, pkt->data_len, (void*)pkt->addr);
+
+
+
+	if (om_debug_do_switch >= 4) {
+	printk(KERN_DEBUG"[oM] pktdump magic:0x%x hdr_len:%d\n", pkt->magic, pkt->hdr_len);
+	}
+
+
+	printk(KERN_DEBUG"[oM] ==========================pktdump header dump=============================\n");
 
 	if (om_debug_do_switch >= 4) {
+		om_dump_packet_hdr(pkt);
 		om_dump_packet_data(pkt);
 	}
 
@@ -236,9 +242,7 @@
 		return -ENODEV;
 	}
 
-	OMDEBUG_PROTOCOL(2, "Adding packet to tsk pid=%d hpid=%d type=%s flags=0x%x len=%d\n"
-			, tsk->hpid, tsk->rpid
-			, __get_packet_name(pkt->type), pkt->flags, pkt->data_len);
+	OMDEBUG_PROTOCOL(2, "Adding packet\n");
 	OMDEBUG_PROTOCOL_DO(3, om_dump_packet(pkt));
 
 	/* out of band packet need special care */
@@ -298,7 +302,7 @@
 	iov.iov_base = data;
 	iov.iov_len = len;
 
-	OMDEBUG_PROTOCOL(2, "KCOMD: reading data (%dB)... \n", len);
+	OMDEBUG_PROTOCOL(2, "KCOMD: reading data (%d B)... \n", len);
 
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
@@ -306,7 +310,7 @@
 	start_jiffies = jiffies;
 	while (iov.iov_len > 0) {
 
-		OMDEBUG_PROTOCOL(3, "KCOMD: (Re)Starting read loop\n");
+		OMDEBUG_PROTOCOL(4, "KCOMD: (Re)Starting read loop\n");
 		i = sock_recvmsg(sock, &msg, iov.iov_len, msg.msg_flags);
 		if ((i == -ENOSPC) || (i == -EAGAIN)) {
 
@@ -328,7 +332,7 @@
 		iov.iov_base += i;
  	}
 
-	OMDEBUG_PROTOCOL(3, "KCOMD: Exited read loop\n");
+	OMDEBUG_PROTOCOL(4, "KCOMD: Exited read loop\n");
 
 read_exit:
 	set_fs(oldfs);
@@ -381,7 +385,7 @@
 	iov.iov_base = recv_pkt;
  	iov.iov_len = KCOM_PKT_NET_SIZE;
 
- 	OMDEBUG_PROTOCOL(2, "KCOMD: reading headers ... \n");
+ 	OMDEBUG_PROTOCOL(4, "KCOMD: reading headers ... \n");
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 
@@ -420,7 +424,7 @@
 
 	/* Check for magic and header length */
 	if (OM_PKT_MAGIC != recv_pkt->magic || KCOM_PKT_NET_SIZE != recv_pkt->hdr_len) {
-		printk(KERN_ERR "Corrupted packet header received\n");
+		printk(KERN_ERR "[oM] Corrupted packet header received\n");
 		goto exit_error;
 	}
 
@@ -428,7 +432,7 @@
  	return 0;
 
 receive_timeout:
-	printk(KERN_ERR"Can't receive header %d fragment, read timeout\n", i);
+	printk(KERN_ERR "[oM] Can't receive header %d fragment, read timeout\n", i);
 	err = -ETIMEDOUT;
  	goto exit_error;
 
@@ -628,7 +632,7 @@
 
 
 
-	OMDEBUG_PROTOCOL(3, "creating packet (len %d type 0x%x flags %d)... \n"
+	OMDEBUG_PROTOCOL(4, "creating packet (len %d type 0x%x flags %d)... \n"
 			, len, (unsigned)type, flags);
 
 	*destpkt = NULL;
Index: linux/hpc/kcomd.c
===================================================================
--- linux.orig/hpc/kcomd.c	2007-01-04 14:14:36.000000000 +0100
+++ linux/hpc/kcomd.c	2007-01-04 14:17:27.000000000 +0100
@@ -855,7 +855,7 @@
 	struct kcom_task *task;
 	/* for each nodes (set fds.in && fds.out) and reset the waiting fds */
 
-	OMDEBUG_KCOMD( 3, "Resetting select fdsets (%d fdsets)\n", n);
+	OMDEBUG_KCOMD( 4, "Resetting select fdsets (%d fdsets)\n", n);
 	zero_fd_set(n, sockets_fds.in);
 	zero_fd_set(n, sockets_fds.out);
 	zero_fd_set(n, sockets_fds.ex);
@@ -864,13 +864,13 @@
 	list_for_each_entry(node, &kcom_nodes, list) {
 
 		if (node->fd == -1 || node->fd > maxfds) {
-			OMDEBUG_KCOMD( 3, "KCOMD found invalid fd ?\n");
+			printk( "[oM] KCOMD found invalid fd ?\n");
 			schedule_timeout_interruptible(HZ);
 			continue;
 		}
 
 		/* if a file descriptor is open, we want select to pay attention.*/
-		OMDEBUG_KCOMD( 3, "Setting fd %d\n", node->fd );
+		OMDEBUG_KCOMD( 4, "Setting fd %d\n", node->fd );
 		set_bit(node->fd, sockets_fds.in);
 		set_bit(node->fd, sockets_fds.ex);
 
@@ -878,7 +878,7 @@
 		read_lock(&node->tasks_lock);
 		list_for_each_entry(task, &node->tasks, list)
 			if (!list_empty(&task->out_packs)) {
-				OMDEBUG_KCOMD(3, "Setting out flag for fd %d\n", node->fd );
+				OMDEBUG_KCOMD(4, "Setting out flag for fd %d\n", node->fd );
 				set_bit(node->fd, sockets_fds.out);
 			}
 		read_unlock(&node->tasks_lock);
@@ -1243,7 +1243,7 @@
 
 	while (kcomd_done==0)
 	{
-		OMDEBUG_KCOMD( 3, "KCOMD: Entering (restarting) loop\n" );
+		OMDEBUG_KCOMD( 4, "KCOMD: Entering (restarting) loop\n" );
 
  		/* Check if we must leave ... */
  		if (kcomd_module_exit) {
@@ -1316,7 +1316,7 @@
 	}
 
 /* DONE*/
- 	printk(KERN_INFO "kcomd: openMosix kernel communication daemon cleaning up.\n");
+ 	printk(KERN_INFO "[oM] kcomd: openMosix kernel communication daemon cleaning up.\n");
 
 	if (fd4!=-1)
 		sys_close(fd4);
Index: linux/include/hpc/debug.h
===================================================================
--- linux.orig/include/hpc/debug.h	2007-01-04 15:00:54.000000000 +0100
+++ linux/include/hpc/debug.h	2007-01-04 15:01:28.000000000 +0100
@@ -60,12 +60,15 @@
 /*******************************************************************************
  * Debug macros, to be used as much as possible			 	       *
  ******************************************************************************/
-#define OMDEBUG(var, lim, fmt...)	{ if (var >= lim) \
+#define OMDEBUG(var, lim, fmt...)	do { \
+					    if (var >= lim) {\
  						printk(KERN_DEBUG \
  						      "[OMDBG] %s:%d " \
  						      , __FUNCTION__ \
  						      ,  __LINE__); \
-						printk(fmt); }
+						printk(fmt); \
+					    } \
+					} while (0) \
 
 #define OMDEBUG_DO(var, lim, action)	do { \
 					    if (var >= lim) { \
