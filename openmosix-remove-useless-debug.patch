Subject: [patch @num@/@total@] Removes useless debug info
This patch removes debug info (initially added by Matt for debugging kcomd)
Index: linux/hpc/kcom.c
===================================================================
--- linux.orig/hpc/kcom.c	2006-11-02 22:51:57.000000000 +0100
+++ linux/hpc/kcom.c	2006-11-02 22:51:58.000000000 +0100
@@ -298,7 +298,6 @@
 		printk(KERN_ERR "Unable to find kcomd daemon.\n");
 		return NULL;
 	}
-	printk(KERN_DEBUG "leaving kcom_node_add\n");
 	return node;
 
 }
@@ -542,14 +541,12 @@
 		list_for_each_entry(tmp2, &tmp->tasks, list)
 			if (task_test_dflags(current, DREMOTE)) {
 				if (tmp2->rpid == pid) {
-					printk(KERN_DEBUG "Deleting remote kcom task %u.\n", pid);
 					list_del(&tmp2->list);
 					kfree(tmp2);
 					break;
 				}
 			 } else {
 				if (tmp2->hpid == pid) {
-					printk(KERN_DEBUG "Deleting home kcom task %u.\n", pid);
 					list_del(&tmp2->list);
 					kfree(tmp2);
 					break;
@@ -584,7 +581,6 @@
 	}
 
 	if (where == 0) {
-		// printk("FUNCTION: kcom_task_find\n");
 		list_for_each_entry(tmp, &kcom_nodes, list)
 			list_for_each_entry(tmp2, &tmp->tasks, list)
 				/*
@@ -592,11 +588,9 @@
 				 * One home node, we're interested in hpid
 				 */
 				if (task_test_dflags(p, DREMOTE)) {
-					// printk("kcom_task_find: dremote\n");
 					if (tmp2->rpid == pid)
 						return tmp2;
 				} else {
-					// printk("kcom_task_find: ddeputy\n");
 					if (tmp2->hpid == pid)
 						return tmp2;
 				}
@@ -612,7 +606,6 @@
 					return tmp2;
 
 	}
-	// printk("leaving FUNCTION: kcom_task_find\n");
 	return NULL;
 }
 
@@ -756,7 +749,6 @@
  **/
 int kcom_send_nack(task_t *p, struct kcom_pkt *recv_pkt)
 {
-	// task_t *kcomd_task;
 	int mig_flag;
 	int syscall_flag;
 	int node_flag;
@@ -804,7 +796,6 @@
  **/
 int kcom_send_ack(task_t *p, struct kcom_pkt *recv_pkt)
 {
-	// task_t *kcomd_task;
 	int mig_flag;
 	int syscall_flag;
 	int node_flag;
@@ -877,7 +868,6 @@
 
 	list_add_tail(&send_pkt->list, &send_tsk->out_packs);
 	if (kcomd_task) {
-		printk(KERN_DEBUG "Signaling kcomd\n");
 		send_sig(SIGHUP, kcomd_task, 0);
 	} else {
 		printk(KERN_ERR "Unable to signal kcomd\n");
@@ -939,14 +929,12 @@
 	struct kcom_pkt *pkt, *pkt_next;
 	int i=-1;
 
-	printk(KERN_DEBUG "wait_for_response...for msgid %u\n", msgid);
 	list_for_each_entry_safe(pkt, pkt_next, &task->in_packs, list)
 		/* FIXME:  check for resp or ack, too. */
 		if (msgid==pkt->msgid) {
 			i=pkt->len;
 			list_del(&pkt->list);
 			kmem_cache_free(kcom_pkt_cachep, pkt);
-			printk(KERN_DEBUG"wait_for_response: i=%d, addr=%lu pkt->resp=%s\n", i, pkt->addr, pkt->resp);
 		}
 	return i;
 
@@ -967,7 +955,6 @@
 
 	node=kcom_node_find((struct sockaddr *)saddr);
 	if (node==NULL) {
-		printk(KERN_DEBUG "Node not found, creating new connection.\n");
 		node=create_connection((struct sockaddr *)saddr);
 		if (!node) {
 			printk(KERN_ERR "ERROR: Unable to create new connection.\n");
@@ -977,7 +964,6 @@
 
 	tsk=kcom_task_find(p->pid);
 	if (tsk==NULL) {
-		printk(KERN_DEBUG "Task not found. creating new.\n");
 		tsk=kcom_task_create(node, p->pid);
 		if (!tsk) {
 			printk(KERN_ERR "ERROR: Unable to create task.\n");
@@ -1001,7 +987,6 @@
 		set_current_state(TASK_INTERRUPTIBLE);
 	}
 	set_current_state(TASK_RUNNING);
-	printk(KERN_DEBUG "Done waiting. msgid %d received...\n", msgid);
 
 
 	return 0;
@@ -1023,7 +1008,6 @@
 
 	node=kcom_node_find((struct sockaddr *)saddr);
 	if (node==NULL) {
-		printk(KERN_DEBUG "node not found, creating new connection.\n");
 		node=create_connection((struct sockaddr *)saddr);
 		if (node==NULL) {
 			return -1;
@@ -1032,7 +1016,6 @@
 
 	tsk=kcom_task_find(p->pid);
 	if (!tsk) {
-		printk(KERN_DEBUG "Task not found. Creating new.\n");
 		tsk=kcom_task_create(node, p->pid);
 		if (!tsk) {
 			printk(KERN_ERR "Unable to create task\n");
@@ -1057,7 +1040,6 @@
 		schedule();
 		goto retry;
 	}
-	printk(KERN_DEBUG "Done waiting. msgid %d received...\n", msgid);
 
 	return i;
 }
Index: linux/hpc/kcomd.c
===================================================================
--- linux.orig/hpc/kcomd.c	2006-11-02 22:51:22.000000000 +0100
+++ linux/hpc/kcomd.c	2006-11-02 22:51:58.000000000 +0100
@@ -176,7 +176,6 @@
 	set_fs(KERNEL_DS);
 
 	while (iov.iov_len > 0) {
-		printk(KERN_DEBUG "sock_sendmsg hdr\n");
 		i = sock_sendmsg(sock, &msg, iov.iov_len);
 		if ((i == -ENOSPC) || (i == -EAGAIN)) {
 			printk(KERN_ERR "Retrying hdr...error %d\n", i);
@@ -210,12 +209,10 @@
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	while (iov.iov_len > 0) {
-		printk(KERN_DEBUG "sock_sendmsg data\n");
 		i = sock_sendmsg(sock, &msg, iov.iov_len);
 
 		if ((i == -ENOSPC) || (i == -EAGAIN)) {
 
-			printk(KERN_DEBUG "Retrying data...error %d\n", i);
 			schedule_timeout(HZ/1000);
 			continue;
 		}
@@ -377,9 +374,7 @@
 	return 0;
 
 error_recv:
-	printk(KERN_DEBUG "sock_close\n");
 	sys_close(node->fd);
-	printk(KERN_DEBUG "sock_release\n");
 	sock_release(node->sock);
 
 	#if 0
@@ -530,10 +525,6 @@
 				}
 		}
 	do_gettimeofday(&stop);
-	if (stop.tv_sec==start.tv_sec)
-		printk(KERN_DEBUG "node_loopB: time %lu usecs\n", stop.tv_usec-start.tv_usec);
-	else
-		printk(KERN_DEBUG "node_loopB: time %lu usecs\n", ((stop.tv_sec*USEC_PER_SEC)+stop.tv_usec)-((start.tv_sec*USEC_PER_SEC)+start.tv_usec));
 		/* spin_unlock(&kcom_nodes_lock);*/
 		/* printk("Done setting bits for select.\n");*/
 
@@ -546,12 +537,9 @@
 	do_gettimeofday(&start);
 		allow_signal (SIGHUP);
 		timeout=-1;
-		printk(KERN_DEBUG "............DO_SELECT...........");
 		ret = do_select(n + 1, &sockets_fds, &timeout);
-		printk(KERN_DEBUG " returned %d.\n", ret);
 		/* SIGHUP is sent by kcom_send to wake up kcomd so it can send the packet*/
 		while (signal_pending (current)) {
-			printk(KERN_DEBUG "[kcomd] dequeueing signal\n");
 			sig = dequeue_signal (current, &current->blocked, &info);
 		}
 		disallow_signal (SIGHUP);
@@ -572,10 +560,6 @@
 			schedule_timeout_interruptible(HZ);
 		}
 	do_gettimeofday(&stop);
-	if (stop.tv_sec==start.tv_sec)
-		printk(KERN_DEBUG "do_select: time %lu usecs\n", stop.tv_usec-start.tv_usec);
-	else
-		printk(KERN_DEBUG "do_select: time %lu usecs\n", ((stop.tv_sec*USEC_PER_SEC)+stop.tv_usec)-((start.tv_sec*USEC_PER_SEC)+start.tv_usec));
 
 		/* test listening sockets */
 		if (fd4 != -1 && test_bit(fd4, sockets_fds.res_in)) {
@@ -602,10 +586,6 @@
 				do_gettimeofday(&start);
 				err=pkt_read(node);
 				do_gettimeofday(&stop);
-				if (stop.tv_sec==start.tv_sec)
-					printk(KERN_DEBUG "pkt_read: time %lu usecs\n", stop.tv_usec-start.tv_usec);
-				else
-					printk(KERN_DEBUG "pkt_read: time %lu usecs\n", ((stop.tv_sec*USEC_PER_SEC)+stop.tv_usec)-((start.tv_sec*USEC_PER_SEC)+start.tv_usec));
 				if (err!=0) {
 					kcomd_done=1;
 					printk(KERN_ERR "ERROR receiving data.\nQuitting.\n");
@@ -616,10 +596,6 @@
 				do_gettimeofday(&start);
 				data_write(node);
 				do_gettimeofday(&stop);
-				if (stop.tv_sec==start.tv_sec)
-					printk(KERN_DEBUG "data_write: time %lu usecs\n", stop.tv_usec-start.tv_usec);
-				else
-					printk(KERN_DEBUG "data_write: time %lu usecs\n", ((stop.tv_sec*USEC_PER_SEC)+stop.tv_usec)-((start.tv_sec*USEC_PER_SEC)+start.tv_usec));
 			}
 		}
 		/* spin_unlock(&kcom_nodes_lock);*/
@@ -629,25 +605,18 @@
 	printk(KERN_INFO "kcomd: cleaning up.\n");
 	/* spin_lock(&kcom_nodes_lock);*/
 	if (fd4!=-1) {
-		printk(KERN_DEBUG "fd4=%d\n", fd4);
-		printk(KERN_DEBUG "sys_close(fd4)\n");
 		sys_close(fd4);
 		if (lsock4) {  /* doesn't like this.  Help????????*/
-			printk(KERN_DEBUG "sock_release(lsock4)\n");
 			sock_release(lsock4);
 		}
 	}
 
 	if (fd6!=-1) {
-		printk(KERN_DEBUG "fd6=%d\n", fd6);
 		if (lsock6) { /* doesn't like this.  Help????????*/
-			printk(KERN_DEBUG "sock_release(lsock6)\n");
 			sock_release(lsock6);
 		}
-		printk(KERN_DEBUG "sys_close(fd6)\n");
 		sys_close(fd6);
 	}
-	printk(KERN_DEBUG "Stopped accepting new connections.\n");
 
 	list_for_each_entry_safe(node, node_next, &kcom_nodes, list) {
 		list_for_each_entry_safe(task, task_next, &node->tasks, list) {
@@ -668,14 +637,10 @@
 		}
 
 
-		printk(KERN_DEBUG "sock_release, %d\n", node->fd);
 		sock_release(node->sock);
-		printk(KERN_DEBUG "sys_close\n");
 		sys_close(node->fd);
 		/* kfree(node->sock);*/
-		printk(KERN_DEBUG "list_del\n");
 		list_del(&node->list);
-		printk(KERN_DEBUG "kmem_cache_free\n");
 		kmem_cache_free(kcom_node_cachep, node);
 		/* kfree(node);*/
 	}
Index: linux/hpc/migrecv.c
===================================================================
--- linux.orig/hpc/migrecv.c	2006-11-02 22:51:55.000000000 +0100
+++ linux/hpc/migrecv.c	2006-11-02 22:51:58.000000000 +0100
@@ -83,10 +83,8 @@
 	struct kcom_pkt *send_pkt;
 	task_t *sltsk;
 
-	printk(KERN_DEBUG "FUNCTION: mig_do_receive_home\n");
 
 	if ((recv_kcom_pkt->type & MSG_MASK)==PKT_NEW_MSG) {
-		printk(KERN_DEBUG "Received MIG_GO_HOME NEW_MSG packet.\n");
 
 		recv_tsk=kcom_task_find(recv_kcom_pkt->hpid);
 		if (!recv_tsk) {
@@ -109,7 +107,6 @@
 		sltsk=find_task_by_pid(recv_kcom_pkt->hpid); /* only home node will receive MIG_GO_HOME NEW_MSG*/
 		/* read_unlock(&tasklist_lock);*/
 		if (sltsk) {
-			printk(KERN_DEBUG "Registering task migration\n");
 			task_register_migration(sltsk);
 		} else {
 			printk(KERN_ERR "Failed to register task migration\n");
@@ -118,7 +115,6 @@
 
 
 	} else {
-		printk(KERN_DEBUG "Received MIG_GO_HOME PKT_ACK packet.\n");
 
 		recv_tsk=kcom_task_find(recv_kcom_pkt->rpid);
 		if (!recv_tsk) {
@@ -131,7 +127,6 @@
 		/* spin_unlock(&recv_tsk->spinlock);*/
 		sltsk=find_task_by_pid(recv_kcom_pkt->rpid); /* only remote node will receive MIG_GO_HOME ack*/
 		if (sltsk) {
-			printk(KERN_DEBUG "Waking up process %u\n", sltsk->pid);
 			wake_up_process(sltsk);
 		} else {
 			printk(KERN_ERR"Unable to wake up process %u\n", recv_kcom_pkt->rpid);
@@ -158,10 +153,8 @@
 	pid_t rpid;
 	struct sockaddr_in *saddr;
 	const unsigned int LO_IP=in_aton("127.0.0.1");
-	printk(KERN_DEBUG "Received MIG_INIT packet.\n");
 
 	if ((recv_kcom_pkt->type & MSG_MASK)==PKT_NEW_MSG) {	 /* incoming process*/
-		printk(KERN_DEBUG "Creating new process.\n");
 		rpid=0;
 
 		send_pkt=kcom_pkt_create(0, MIG_INIT | PKT_ACK | REM_FLG, 0,  NULL);
@@ -179,7 +172,6 @@
 		/* spin_lock();*/
 		saddr=(struct sockaddr_in *)&node->addr;
 		if (saddr->sin_addr.s_addr==LO_IP) { /* this allows loopback migration to work.*/
-			printk(KERN_DEBUG "Loopback migration.\n"); /* both home and remote processes use same task.  better idea?*/
 			send_tsk=kcom_home_task_find(recv_kcom_pkt->hpid);
 		} else {
 			send_tsk=kcom_task_create(node, 0);
@@ -209,8 +201,7 @@
 			list_add_tail(&send_pkt->list, &send_tsk->out_packs);
 			/* spin_unlock(&send_tsk->spinlock);*/
 			return -1;
-		} else
-			printk(KERN_DEBUG "New process: %u\n", rpid);
+		}
 
 		send_pkt->rpid=rpid;
 
@@ -238,7 +229,6 @@
 {
 
 	OMDEBUG_MIG(2, "MIG_MM\n");
-	printk(KERN_DEBUG "FUNCTION: mig_do_receive_mm\n");
 
 	down_write(&p->mm->mmap_sem);
 	memcpy(&p->mm->start_code, pkt->data, pkt->len);
@@ -247,7 +237,6 @@
 
 	kcom_send_ack(p, pkt);
 
-	printk(KERN_DEBUG "leaving FUNCTION: mig_do_receive_mm\n");
 
 }
 EXPORT_SYMBOL_GPL(mig_do_receive_mm);
@@ -266,7 +255,6 @@
 	extern asmlinkage long sys_madvise(unsigned long, size_t, int);
 
 
-	printk(KERN_DEBUG "FUNCTION: mig_do_receive_vma\n");
 
 	a = (struct omp_mig_vma *)pkt->data;
 
@@ -329,7 +317,6 @@
 
 	kcom_send_ack(p, pkt);
 
-	printk(KERN_DEBUG "leaving FUNCTION: mig_do_receive_vma\n");
 	return 0;
 }
 EXPORT_SYMBOL_GPL(mig_do_receive_vma);
@@ -428,7 +415,6 @@
 {
 	struct omp_mig_fp *fp;
 
-	printk(KERN_DEBUG "FUNCTION: mig_do_receive_fp\n");
 	fp=(void *)pkt->data;
 
 	OMDEBUG_MIG(2, "MIG_FP\n");
@@ -437,7 +423,6 @@
 
 	kcom_send_ack(p, pkt);
 
-	printk(KERN_DEBUG "leaving FUNCTION: mig_do_receive_fp\n");
 
 	return 0;
 }
@@ -491,7 +476,6 @@
 	arch_pick_mmap_layout(p->mm);
 
 	kcom_send_ack(p, pkt);
-	printk(KERN_DEBUG "leaving FUNCTION: mig_do_receive_proc_context\n");
 
 	return 0;
 }
@@ -524,7 +508,6 @@
 	/* Initialize remote proc's whereto*/
 	if (task_test_dflags(p, DREMOTE)) {
 		memcpy(p->om.whereto, &mytsk->node->addr, sizeof(mytsk->node->addr));
-		printk(KERN_DEBUG "Setting mytsk->rpid (currently: %u) = p->pid (%u)\n", mytsk->rpid, p->pid);
 	}
 
 	set_current_state(TASK_INTERRUPTIBLE);
@@ -533,7 +516,6 @@
 
 		if (!list_empty(&mytsk->in_packs))
 			list_for_each_entry_safe(pkt, pkt_next, &mytsk->in_packs, list) {
-				printk(KERN_DEBUG "mig_do_receive:  msgid=%u\n", pkt->msgid);
 
 				switch (pkt->type & MIG_MASK) {
 
@@ -593,9 +575,7 @@
 			}
 
 	/* spin_unlock(&mytsk->spinlock);*/
-	printk(KERN_DEBUG "process %u going to sleep.\n", p->pid);
 	schedule();
-	printk(KERN_DEBUG "process %u waking up.\n", p->pid);
 	set_current_state(TASK_INTERRUPTIBLE);
 	/* spin_lock(&mytsk->spinlock);*/
 	}
@@ -642,10 +622,6 @@
 	set_current_state(TASK_RUNNING);
 	/* set_current_state(TASK_INTERRUPTIBLE);*/
 	schedule();
-	if (task_test_dflags(p, DREMOTE))
-	printk(KERN_DEBUG "[OM] starting remote process(%d)\n", p->pid);
-	else
-	printk(KERN_DEBUG "[OM] starting local process(%d)\n", p->pid);
 
 	#if 0
 	flush_signals(p); //MSDMSD
Index: linux/hpc/migsend.c
===================================================================
--- linux.orig/hpc/migsend.c	2006-11-02 22:51:55.000000000 +0100
+++ linux/hpc/migsend.c	2006-11-02 22:51:58.000000000 +0100
@@ -77,7 +77,6 @@
 
 	dest_ptr=(void *)p->om.whereto;
 	if (!used_math()) {
-		printk(KERN_DEBUG "leaving FUNCTION: mig_send_fp, !used_math\n");
 		return 0;
 	}
 
@@ -103,12 +102,10 @@
 	int ret;
 
 	dest_ptr=(void *)p->om.whereto;
-	printk(KERN_DEBUG "FUNCTION: mig_send_mm.\n");
 	if (task_test_dflags(p, DREMOTE))
 		ret=kcom_send_with_ack(MIG_MM | REM_FLG, sizeof(struct omp_mig_mm), (char *)&p->mm->start_code, 0, dest_ptr);
 	else
 		ret=kcom_send_with_ack(MIG_MM | DEP_FLG, sizeof(struct omp_mig_mm), (char *)&p->mm->start_code, 0, dest_ptr);
-	printk(KERN_DEBUG "leaving FUNCTION: mig_send_mm\n");
 
 	return ret;
 }
@@ -187,7 +184,6 @@
 	struct sockaddr_in *dest_ptr;
 	char *data;
 
-	printk(KERN_DEBUG "FUNCTION: mig_send_pages\n");
 	data=kzalloc(PAGE_SIZE, GFP_KERNEL);
 
 	dest_ptr=(void *)p->om.whereto;
@@ -280,11 +276,9 @@
 	arch_mig_send_pre(p);
 
 	if (task_test_dflags(p, DREMOTE))  {
-		printk(KERN_DEBUG "Sending MIG_GO_HOME\n");
 		if (kcom_send_with_ack(MIG_GO_HOME | REM_FLG, 0, NULL, 0, dest_ptr))
 			goto fail_mig;
 	} else {
-		printk(KERN_DEBUG "Sending MIG_INIT\n");
 		if (kcom_send_with_ack(MIG_INIT | DEP_FLG, 0, NULL, 0, dest_ptr))
 			goto fail_mig;
 	}
@@ -298,9 +292,6 @@
 
 	arch_mig_send_post(p);
 
-	printk(KERN_DEBUG "Process %u now migrated to %u.%u.%u.%u\n", p->pid,
-					(0x000000FF & addr), (0x0000FF00 & addr)>>8,
-					(0x00FF0000 & addr)>>16, (0xFF000000 & addr) >> 24);
 
 	return 0;
 fail_mig:
Index: linux/hpc/proc.c
===================================================================
--- linux.orig/hpc/proc.c	2006-11-02 22:51:55.000000000 +0100
+++ linux/hpc/proc.c	2006-11-02 22:51:59.000000000 +0100
@@ -35,6 +35,7 @@
 #include <hpc/debug.h>
 #include <hpc/mig.h>
 
+
 /*
  *	PID set/get accessor
  */
@@ -49,11 +50,9 @@
 	buf[size-1]='\0';	 /* ensures no trailing crap in 'where' file*/
 
 	if (size >= 4 && strnicmp(buf, "home", 4) == 0) {
-		printk(KERN_DEBUG "HOME detected - ");
 		/* p->om.whereto=NULL;*/
 		/* ret = task_register_migration(p, NULL);*/
 		if (task_test_dflags(p, DDEPUTY)) { /* if already migrated and this is home node*/
-			printk(KERN_DEBUG "on deputy node\n");
 			node=kcom_node_find((struct sockaddr *)dest_ptr);
 			if (node==NULL)
 				return 1;
@@ -72,7 +71,6 @@
 				send_sig(SIGHUP,kcomd_task,0);
 			/* kcom_send(MIG_COME_HOME | PKT_NEW_MSG | DEP_FLG, 0, NULL, 0, dest_ptr);*/
 		} else {
-			printk(KERN_DEBUG "on remote node\n");
 			task_register_migration(p);
 		}
 	} else {
@@ -82,7 +80,6 @@
 				cur_addr=(struct sockaddr_in *)&tsk->node->addr;
 
 				if (in_aton(buf) == cur_addr->sin_addr.s_addr) { /* home -> remote - redundant migration;*/
-					printk(KERN_DEBUG "Process already migrated to %s\n", buf);
 					return size;
 				} /* FIXME:  remote to remote migration*/
 			}
@@ -152,13 +149,11 @@
 
 static int proc_admin_set_bring(char *buf, size_t size)
 {
-	printk(KERN_DEBUG "oM: proc: set bring");
 	return size;
 }
 
 static int proc_admin_set_expel(char *buf, size_t size)
 {
-	printk(KERN_DEBUG "oM: proc: set expel");
 	return size;
 }
 
Index: linux/hpc/remote.c
===================================================================
--- linux.orig/hpc/remote.c	2006-11-02 22:51:55.000000000 +0100
+++ linux/hpc/remote.c	2006-11-02 22:51:59.000000000 +0100
@@ -160,10 +160,8 @@
 	struct kcom_task *send_tsk;
 	// task_t *kcomd_task;
 
-	printk(KERN_DEBUG "FUNCTION: remote_do_signal\n");
 	memcpy(&s, pkt->data, pkt->len);
 	// error = comm_recv(p->om.contact, &s, sizeof(s));
-	printk(KERN_DEBUG "received signal %d\n", s.signr);
 
 
 	spin_lock_irqsave(&p->sighand->siglock, flags);
@@ -187,11 +185,9 @@
 	#endif
 
 	if (kcomd_task) {
-		printk(KERN_DEBUG "Signaling kcomd\n");
 		send_sig(SIGHUP, kcomd_task, 0);
 	} else
 		printk(KERN_ERR "Unable to signal kcomd\n");
-	printk(KERN_DEBUG "leaving FUNCTION: remote_do_signal\n");
 	return 0;
 }
 
@@ -214,7 +210,6 @@
 		#endif
 		break;
 	case DEP_COMING_HOME:
-		printk(KERN_DEBUG "remote_do_comm(): got DEP_COMING_HOME\n");
 		error = task_remote_expel(p);
 		break;
 	default:
@@ -242,7 +237,6 @@
 	int i;
 	struct sockaddr_in *dest_ptr=(struct sockaddr_in *)p->om.whereto;
 
-	printk(KERN_DEBUG "FUNCTION: remote_do_syscall\n");
 
 	OMDEBUG_SYS(1, "[remote] remote syscall %d\n", n);
 
@@ -250,7 +244,6 @@
 	for (i = 0; i < NR_MAX_SYSCALL_ARG; i++)
 		s.arg[i] = arch_get_sys_arg(i, regs);
 
-	printk(KERN_DEBUG "syscall: [%d]\n", s.n);
 	kcom_send_with_ack(MIG_SYSCALL | REM_FLG, sizeof(s), (char *)&s, 0, dest_ptr);
 
 	// Set interruptible so we can sleep, but if the remote sends syscall info requests (COPY_TO/FROM_USER, etc), then we have to answer those before sleeping.
@@ -262,15 +255,12 @@
 	if ((n != __NR_exit_group) && (n != __NR_exit))
 		r.ret = remote_handle_user(p, REM_SYSCALL|REPLY);
 	else { // exit
-		printk(KERN_DEBUG "leaving FUNCTION: remote_do_syscall; exit\n");
 		goto error;
 	}
 
 
 	// OMDEBUG_SYS(2, "[remote] sys[%d] = %ld\n", n, r.ret);
-	printk(KERN_DEBUG "[remote] sys[%d] = %ld\n", n, r.ret);
 
-	printk(KERN_DEBUG "leaving FUNCTION: remote_do_syscall\n");
 	return r.ret;
 
 error:
Index: linux/hpc/task.c
===================================================================
--- linux.orig/hpc/task.c	2006-11-02 22:51:55.000000000 +0100
+++ linux/hpc/task.c	2006-11-02 22:51:59.000000000 +0100
@@ -155,7 +155,6 @@
 	task_t *parent = current;
 
 	memset(&p->om, 0, sizeof(om_task_t));
-	printk(KERN_DEBUG "leaving FUNCTION: task_local_bring\n");
 
 	if (p->pid == 1)
 		task_set_stay(p, DSTAY_SYSTEM);
